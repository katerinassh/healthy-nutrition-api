import {
  Controller,
  Post,
  Get,
  Body,
  Req,
  UseGuards,
  Patch,
  Query,
} from '@nestjs/common';
import { CreateCustomerDTO } from '../user/dto/createCustomer.dto';
import { SignInDTO } from './dto/signIn.dto';
import { AuthService } from './auth.service';
import { AccessTokenGuard } from './guards/accessToken.guard';
import { RefreshTokenGuard } from './guards/refreshToken.guard';
import { User } from '../user/user.entity';
import { Roles } from '../auth/decorators/roles.decorator';
import { RolesEnum } from '../user/enum/roles.enum';
import { CompleteRegistrationDTO } from './dto/completeRegistration.dto';
import {
  ApiTags,
  ApiBody,
  ApiOperation,
  ApiOkResponse,
  ApiBadRequestResponse,
  ApiForbiddenResponse,
  ApiNotAcceptableResponse,
  ApiQuery,
  ApiBearerAuth,
} from '@nestjs/swagger';
import { GoogleOauthGuard } from './guards/google-oath.guard';

@ApiTags('Auth')
@Controller('auth')
export class AuthController {
  constructor(private service: AuthService) {}

  @Post('customer-sign-up')
  @ApiOperation({ summary: 'Create account for customer' })
  @ApiBody({ type: CreateCustomerDTO })
  @ApiOkResponse({ description: 'Customer account created successfully' })
  @ApiBadRequestResponse({
    description: 'User with given email already exists',
  })
  signUp(
    @Body() createCustomerDto: CreateCustomerDTO,
  ): Promise<{ accessToken: string; refreshToken: string; user: User }> {
    return this.service.customerSignUp(createCustomerDto);
  }

  @Post('sign-in')
  @ApiOperation({ summary: 'Get tokens to sign in into the system' })
  @ApiBody({ type: SignInDTO })
  @ApiOkResponse({ description: 'User has access to profile' })
  @ApiBadRequestResponse({ description: 'Email or password is invalid' })
  signIn(
    @Body() signInDto: SignInDTO,
  ): Promise<{ accessToken: string; refreshToken: string }> {
    return this.service.signIn(signInDto);
  }

  @UseGuards(AccessTokenGuard)
  @Post('logout')
  @ApiOperation({ summary: 'Give away access to user`s actions' })
  @ApiOkResponse({
    description: 'User does not have access to profile anymore',
  })
  logOut(@Req() req): Promise<void> {
    return this.service.logOut(req.user['sub']);
  }

  @UseGuards(RefreshTokenGuard)
  @Get('refresh')
  @ApiOperation({ summary: 'Refresh access token' })
  @ApiOkResponse({ description: 'New acess token was generated' })
  @ApiForbiddenResponse({
    description: 'No user, user is not signed in or error with refresh token',
  })
  refreshTokens(
    @Req() req,
  ): Promise<{ accessToken: string; refreshToken: string }> {
    const userId = req.user['sub'];
    const refreshToken = req.user['refreshToken'];
    return this.service.refreshTokens(+userId, refreshToken);
  }

  @Roles(RolesEnum.Admin)
  @UseGuards(AccessTokenGuard)
  @Post('invite-admin')
  @ApiBearerAuth()
  @ApiOperation({ summary: 'Send email invitation to a new admin' })
  @ApiOkResponse({ description: 'Email is sent, blank admin is created' })
  @ApiBadRequestResponse({
    description: 'User with given email is in the system',
  })
  @ApiNotAcceptableResponse({ description: 'Error during sending email' })
  inviteAdmin(@Body('email') email: string): Promise<void> {
    return this.service.inviteAdmin(email);
  }

  @Patch('complete-registration')
  @ApiBearerAuth()
  @ApiOperation({
    summary: 'Complete admin registration with link from the email',
  })
  @ApiQuery({
    name: 'token',
    required: true,
    description: 'Token generated by another admin',
  })
  @ApiBody({ type: CompleteRegistrationDTO })
  @ApiOkResponse({ description: 'Admin account is ready for interaction' })
  @ApiForbiddenResponse({ description: 'Link has been expired' })
  completeRegistration(
    @Query('token') token: string,
    @Body() completeRegistrationDto: CompleteRegistrationDTO,
  ): Promise<User> {
    return this.service.completeRegistration(token, completeRegistrationDto);
  }

  @Get('google')
  @UseGuards(GoogleOauthGuard)
  @ApiOperation({ summary: 'Login with Google' })
  @ApiOkResponse({ description: 'Redirected to google auth' })
  async googleAuth(): Promise<boolean> {
    return true;
  }

  @Get('google/redirect')
  @UseGuards(GoogleOauthGuard)
  @ApiOperation({ summary: 'Login with Google, automatic redirection' })
  @ApiOkResponse({ description: 'User logged in with Google' })
  @ApiBadRequestResponse({
    description: 'User with such Google profile is not registrated',
  })
  async googleAuthRedirect(
    @Req() req,
  ): Promise<{ accessToken: string; refreshToken: string; user: User }> {
    return this.service.getUserDataFromSocials(req.user.email);
  }
}
